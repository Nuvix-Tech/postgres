# syntax=docker/dockerfile:1.6
ARG postgresql_major=17-orioledb
ARG postgresql_release=${postgresql_major}.1

# Bump default build arg to build a package from source
# Bump vars.yml to specify runtime package version
ARG sfcgal_release=1.3.10
ARG postgis_release=3.3.2
ARG pgrouting_release=3.4.1
ARG pgtap_release=1.2.0
ARG pg_cron_release=1.6.2
ARG pgaudit_release=1.7.0
ARG pgjwt_release=9742dab1b2f297ad3811120db7b21451bca2d3c9
ARG pgsql_http_release=1.5.0
ARG plpgsql_check_release=2.2.5
ARG pg_safeupdate_release=1.4
ARG timescaledb_release=2.9.1
ARG wal2json_release=2_5
ARG pljava_release=1.6.4
ARG plv8_release=3.1.5
ARG pg_plan_filter_release=5081a7b5cb890876e67d8e7486b6a64c38c9a492
ARG pg_net_release=0.7.1
ARG rum_release=1.3.13
ARG pg_hashids_release=cd0e1b31d52b394a0df64079406a14a4f7387cd6
ARG libsodium_release=1.0.18
ARG pgsodium_release=3.1.6
ARG pg_graphql_release=1.5.11
ARG pg_stat_monitor_release=1.1.1
ARG pg_jsonschema_release=0.1.4
ARG pg_repack_release=1.4.8
ARG vault_release=0.2.8
ARG groonga_release=12.0.8
ARG pgroonga_release=2.4.0
ARG wrappers_release=0.5.0
ARG hypopg_release=1.3.1
ARG pgvector_release=0.4.0
ARG pg_tle_release=1.3.2
ARG index_advisor_release=0.2.0
ARG supautils_release=2.2.0
ARG wal_g_release=3.0.5

FROM ubuntu:focal AS base

# Combine apt updates and installs for better caching and fewer layers
RUN apt-get update -y && \
    apt-get install -y --no-install-recommends \
    curl \
    gnupg \
    lsb-release \
    software-properties-common \
    wget \
    sudo \
    tree \
    tzdata \
    build-essential \
    checkinstall \
    cmake \
    locales \
    ca-certificates && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Set up timezone non-interactively
RUN ln -fs /usr/share/zoneinfo/Etc/UTC /etc/localtime && \
    dpkg-reconfigure --frontend noninteractive tzdata

# Set up locales
RUN echo "C.UTF-8 UTF-8" > /etc/locale.gen && \
    echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen && \
    locale-gen && \
    localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8 && \
    localedef -i C -c -f UTF-8 -A /usr/share/locale/locale.alias C.UTF-8

ENV LANG en_US.UTF-8
ENV LANGUAGE en_US:en
ENV LC_ALL en_US.UTF-8
ENV LOCALE_ARCHIVE /usr/lib/locale/locale-archive

# Add users early for better caching
RUN adduser --system --home /var/lib/postgresql --no-create-home --shell /bin/bash --group --gecos "PostgreSQL administrator" postgres && \
    adduser --system --no-create-home --shell /bin/bash --group wal-g && \
    usermod -aG postgres wal-g

# Install Nix with custom config for caching
RUN curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install linux \
    --init none \
    --no-confirm \
    --extra-conf "substituters = https://cache.nixos.org https://nix-postgres-artifacts.s3.amazonaws.com" \
    --extra-conf "trusted-public-keys = nix-postgres-artifacts:dGZlQOvKcNEjvT7QEAJbcV6b6uk7VF/hWMjhYleiaLI= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY="

ENV PATH="${PATH}:/nix/var/nix/profiles/default/bin"

# Copy context and install Nix packages in a builder stage for better isolation
FROM base AS nix-builder

COPY . /nixpg
WORKDIR /nixpg

# Install PostgreSQL and extensions via Nix, gc to minimize store
RUN nix profile install .#psql_17/bin && \
    nix store gc

# Install wal-g separately
RUN nix profile install .#wal-g-3 && \
    nix store gc

# Prepare directories and symlinks in a separate stage if needed, but do it in final

FROM base AS gosu

ARG TARGETARCH
ARG GOSU_VERSION=1.16
ARG GOSU_GPG_KEY=B42F6819007F00F88E364FD4036A9C25BF357DD4

# Download and verify gosu
ADD https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$TARGETARCH /usr/local/bin/gosu
ADD https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$TARGETARCH.asc /usr/local/bin/gosu.asc

RUN gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys $GOSU_GPG_KEY && \
    gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu && \
    gpgconf --kill all && \
    chmod +x /usr/local/bin/gosu && \
    rm /usr/local/bin/gosu.asc

FROM base AS production

# Copy Nix-installed binaries and shares from builder
COPY --from=nix-builder /nix /nix
COPY --from=nix-builder /nix/var/nix/profiles/default/bin /nix/var/nix/profiles/default/bin
ENV PATH="${PATH}:/nix/var/nix/profiles/default/bin"

# Copy wal-g from nix-builder
COPY --from=nix-builder /nix/var/nix/profiles/default/bin/wal-g-3 /usr/local/bin/wal-g

# Copy gosu
COPY --from=gosu /usr/local/bin/gosu /usr/local/bin/gosu

# Set up PostgreSQL directories and symlinks
RUN mkdir -p /usr/lib/postgresql/bin \
    /usr/lib/postgresql/share/postgresql \
    /usr/share/postgresql \
    /var/lib/postgresql \
    /var/run/postgresql \
    /etc/postgresql-custom \
    /usr/share/postgresql/extension && \
    chown -R postgres:postgres /usr/lib/postgresql /usr/share/postgresql /var/lib/postgresql /var/run/postgresql /etc/postgresql-custom && \
    ln -s /nix/var/nix/profiles/default/bin/* /usr/lib/postgresql/bin/ && \
    ln -s /nix/var/nix/profiles/default/bin/* /usr/bin/ && \
    chown -R postgres:postgres /usr/bin && \
    ln -s /nix/var/nix/profiles/default/share/postgresql/* /usr/lib/postgresql/share/postgresql/ && \
    ln -s /nix/var/nix/profiles/default/share/postgresql/* /usr/share/postgresql/ && \
    chown -R postgres:postgres /usr/lib/postgresql/share/postgresql/ /usr/share/postgresql/ && \
    ln -sf /usr/lib/postgresql/share/postgresql/timezonesets /usr/share/postgresql/timezonesets

ENV PGDATA=/var/lib/postgresql/data

# Copy configs and scripts, chown in one go
COPY --chown=postgres:postgres ansible/files/postgresql_config/postgresql.conf.j2 /etc/postgresql/postgresql.conf
COPY --chown=postgres:postgres ansible/files/postgresql_config/pg_hba.conf.j2 /etc/postgresql/pg_hba.conf
COPY --chown=postgres:postgres ansible/files/postgresql_config/pg_ident.conf.j2 /etc/postgresql/pg_ident.conf
COPY --chown=postgres:postgres ansible/files/postgresql_config/postgresql-stdout-log.conf /etc/postgresql/logging.conf
COPY --chown=postgres:postgres ansible/files/postgresql_config/supautils.conf.j2 /etc/postgresql-custom/supautils.conf
COPY --chown=postgres:postgres ansible/files/postgresql_extension_custom_scripts /etc/postgresql-custom/extension-custom-scripts
COPY --chown=postgres:postgres ansible/files/pgsodium_getkey_urandom.sh.j2 /usr/lib/postgresql/bin/pgsodium_getkey.sh
COPY --chown=postgres:postgres ansible/files/postgresql_config/custom_read_replica.conf.j2 /etc/postgresql-custom/read-replica.conf
COPY --chown=postgres:postgres ansible/files/postgresql_config/custom_walg.conf.j2 /etc/postgresql-custom/wal-g.conf
COPY --chown=postgres:postgres ansible/files/walg_helper_scripts/wal_fetch.sh /home/postgres/wal_fetch.sh
COPY ansible/files/walg_helper_scripts/wal_change_ownership.sh /root/wal_change_ownership.sh

# Apply all config modifications in a single RUN for better caching
RUN sed -i \
    -e "s|#unix_socket_directories = '/tmp'|unix_socket_directories = '/var/run/postgresql'|g" \
    -e "s|#session_preload_libraries = ''|session_preload_libraries = 'supautils'|g" \
    -e "s|#include = '/etc/postgresql-custom/supautils.conf'|include = '/etc/postgresql-custom/supautils.conf'|g" \
    -e "s|#include = '/etc/postgresql-custom/wal-g.conf'|include = '/etc/postgresql-custom/wal-g.conf'|g" \
    /etc/postgresql/postgresql.conf && \
    echo "cron.database_name = 'postgres'" >> /etc/postgresql/postgresql.conf && \
    echo "pgsodium.getkey_script= '/usr/lib/postgresql/bin/pgsodium_getkey.sh'" >> /etc/postgresql/postgresql.conf && \
    echo "vault.getkey_script= '/usr/lib/postgresql/bin/pgsodium_getkey.sh'" >> /etc/postgresql/postgresql.conf && \
    echo 'auto_explain.log_min_duration = 10s' >> /etc/postgresql/postgresql.conf && \
    sed -i '/local all  nuvix_admin     scram-sha-256/d' /etc/postgresql/pg_hba.conf && \
    sed -i '/# supabase-specific users/i\# nuvix_admin user mappings\nnuvix_map  postgres   nuvix_admin\nnuvix_map  root       nuvix_admin\nnuvix_map  ubuntu     nuvix_admin\n' /etc/postgresql/pg_ident.conf && \
    sed -i 's/ timescaledb,//g;' /etc/postgresql/postgresql.conf && \
    sed -i 's/db_user_namespace = off/#db_user_namespace = off/g;' /etc/postgresql/postgresql.conf && \
    sed -i 's/ timescaledb,//g; s/ plv8,//g' /etc/postgresql-custom/supautils.conf && \
    chmod +x /usr/lib/postgresql/bin/pgsodium_getkey.sh && \
    ln -s /usr/lib/postgresql/bin/pgsodium_getkey.sh /usr/share/postgresql/extension/pgsodium_getkey

# Include schema migrations
COPY migrations/db /docker-entrypoint-initdb.d/
COPY ansible/files/stat_extension.sql /docker-entrypoint-initdb.d/migrations/00-extension.sql

# Add entrypoint scripts
ADD --chmod=0755 https://github.com/docker-library/postgres/raw/master/17/bullseye/docker-entrypoint.sh /usr/local/bin/upstream-docker-entrypoint.sh
COPY --chmod=0755 docker/docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh

ENTRYPOINT ["docker-entrypoint.sh"]

HEALTHCHECK --interval=2s --timeout=2s --retries=10 CMD pg_isready -U postgres -h localhost
STOPSIGNAL SIGINT
EXPOSE 5432

ENV POSTGRES_HOST=/var/run/postgresql
ENV POSTGRES_USER=nuvix_admin
ENV POSTGRES_DB=postgres
ENV POSTGRES_INITDB_ARGS="--allow-group-access --locale-provider=icu --encoding=UTF-8 --icu-locale=en_US.UTF-8"

CMD ["postgres", "-D", "/etc/postgresql"]
